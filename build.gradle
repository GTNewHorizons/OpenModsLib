/*
 * OpenModsLib build file.
 * @author Arkan <arkan@emberwalker.cc>
 * @lastmodified NeverCast <j.nevercast@gmail.com>
 */

//================================================
// Pre-execute

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack.io"
            url = "https://jitpack.io"
        }
        maven {
              name 'OpenMods Third Party'
              url 'http://repo.openmods.info/artifactory/simple/thirdparty'
        }
    }

    dependencies {
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
        classpath 'net.thesilkminer.gradle.translationchecker:TranslationChecker:1.1'
    }
}

apply plugin: 'forge'
apply plugin: 'java'

// HACK: we want to add those repos to all including projects, but still be available to compile this project directly
rootProject.allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name 'Forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name 'MinecraftS3'
            url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
        }
        maven {
            name "OpenMods"
            url "http://repo.openmods.info/artifactory/openmods"
        }
        maven {
            name "OpenMods Extras"
            url 'http://repo.openmods.info/artifactory/thirdparty'
        }
        ivy {
            name 'BuildCraft'
            artifactPattern 'http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]'
        }
    }
}

dependencies {
    compile name: 'buildcraft', version: '7.1.16', classifier: 'api', ext: 'jar'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
}

def String git(String... arguments) {
    def out = new ByteArrayOutputStream()
    exec {
        executable = 'git'
        args = arguments.toList()
        standardOutput = out
    }
    out.toString().trim()
}

def String gitHash() {
    git 'rev-parse', '--short', 'HEAD'
}

def String gitBranch() {
    git 'rev-parse', '--abbrev-ref', 'HEAD'
}

// Environment
ext.env = System.getenv()

//================================================
// Jar data


// Grab system env
version = mc_ver + "-" + mod_version

ext.in_jenkins = false
// Get Jenkins metadata
ext.jenkinsManifest = manifest {
    if (env.BUILD_TAG != null) { // If this works, we'll assume we're in Jenkins atleast.
        attributes("Jenkins-Build": "true", "Jenkins-Tag": env.BUILD_TAG, "Jenkins-ID": env.BUILD_ID)
        in_jenkins = true
    } else {
        attributes("Jenkins-Build": "false")
    }
}

def branch = in_jenkins ? env.GIT_BRANCH.minus("origin/") : gitBranch()
def hash = gitHash()

// If not on master, add branch to jar name
if (branch != null && !branch.equals("master")) {
    version += "-" + branch
} else {
    //version += "-" + hash
}

// Version tag for jar file name
if (env.BUILD_NUMBER != null) {
    version += "-snapshot-" + env.BUILD_NUMBER
}



// Get Git metadata (if in Jenkins)
ext.gitManifest = manifest {
    if (env.GIT_BRANCH != null) {
        attributes("Git-Branch": branch, "Git-Hash": hash)
    }
}

// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver
    runDir = "eclipse/assets"

    replaceIn "openmods/OpenMods.java"
    replaceIn "openmods/core/OpenModsCore.java"
    replaceIn "openmods/core/OpenModsCorePlugin.java"
    replace '$LIB-VERSION$', mod_version
}

processResources {
    inputs.property "version", mod_version

    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        expand 'version':mod_version,'MCVersion':mc_ver
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

//================================================
// Jar tasks

// Generate FML Coremod manifest
ext.fmlManifest = manifest {
    attributes("FMLCorePlugin": "openmods.core.OpenModsCorePlugin", "FMLCorePluginContainsFMLMod": "true")
}

// Merge Jenkins and Git manifests to form final manifest in final release jar
jar {
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

// Dev jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        from jenkinsManifest, gitManifest, fmlManifest
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    from sourceSets.main.java
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addBooleanOption('Xdoclint:accessibility,html,syntax', true)
    }
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

task updateTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openmodslib"
}

task checkTranslations(type: net.thesilkminer.gradle.plugin.translationchecker.tasks.TranslationCheckTask) {
    modId = "openmodslib"
    dryRun = true
}

task wrapper (type: Wrapper) {
    gradleVersion = "2.12"
}
